{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vuex from 'vuex';\nimport axios from 'axios';\nlet store = new Vuex.Store({\n  // объект Vuex.Store . store- хранилище \n  state: {\n    products: [],\n    cart: [] // корзина\n  },\n\n  // состояние в нем хранятся переменные массивы объекты\n  mutations: {\n    DECRIMENT: () => {},\n    INCRIMENT: (state, index) => {},\n    REMOVE_FROM_CART: (state, index) => {\n      // удаляю элемент из корзины\n      state.cart.splice(index, 1);\n    },\n    SET_CART: (state, product) => {\n      // добавляю элемент в корзины \n\n      if (state.cart.length) {\n        let isProd = false; //меняем на тру если найдем элемент с таким же артиклем \n        state.cart.map(item => {\n          if (item.article === product.article) {\n            // елси нашел товар в корзине тогда к количеству прибовляем еще 1\n            isProd = true;\n            item.quantity++;\n          }\n        });\n        if (!isProd) {\n          // если не нашли товар в корзине тогда добавляю его туда \n          state.cart.push(product);\n        }\n      } else {\n        state.cart.push(product);\n      }\n    },\n    SET_PRODUCTS_TO_STATE: (state, products) => {\n      state.products = products;\n    }\n  },\n  // мутации- при помощи из мы меняем данные состояния state, они синхронны\n  // т.е выполняются  по очереди  \n  actions: {\n    // для получения данных создаю действие\n    DELETE_FROM_CART: ({\n      commit\n    }, index) => {\n      //метод для удаления элемента из корзины \n      commit('REMOVE_FROM_CART', index); //  мутация\n    },\n\n    ADD_TO_CART: ({\n      commit\n    }, product) => {\n      commit('SET_CART', product);\n    },\n    DECRIMENTITEM_ITEM: ({\n      commit\n    }, index) => {\n      commit('INCRIMENT', index);\n    },\n    IECRIMENTITEM_ITEM: ({\n      commit\n    }, index) => {\n      commit('DECRIMENT', index);\n    },\n    GET_PRODUCTS_FROM_API({\n      commit\n    }) {\n      return axios('http://localhost:3000/products', {\n        // аксиос запрос с параметром get по урл, у аксиоса 2 аргумента один урл дальше настройки \n        method: \"GET\"\n      }).then(products => {\n        // после того как запрос выполнился(тогда ) вызываем мутацию\n        commit('SET_PRODUCTS_TO_STATE', products.data);\n        return products.data;\n      }) // вызываю мутацию с названием SET_PRODUCTS_TO_STATE\n      .catch(error => {\n        console.log(error); // если ошибка вывести ошибку в консоль\n        return error;\n      });\n    }\n  },\n  // чтобы не было очереди, они асинхронны можно вызвать 5 действий \n  getters: {\n    PRODUCTS(state) {\n      //геттер(получатель) продуктс с аргументом state\n      return state.products; // возврат того что в стейте называется продуктс\n    },\n\n    // данные обновляются реактивно при изменении state \n    CART(state) {\n      return state.cart;\n    }\n  } // короткий путь до получения информации о данных в сейте \n});\n\nexport default store;","map":{"version":3,"names":["Vuex","axios","store","Store","state","products","cart","mutations","DECRIMENT","INCRIMENT","index","REMOVE_FROM_CART","splice","SET_CART","product","length","isProd","map","item","article","quantity","push","SET_PRODUCTS_TO_STATE","actions","DELETE_FROM_CART","commit","ADD_TO_CART","DECRIMENTITEM_ITEM","IECRIMENTITEM_ITEM","GET_PRODUCTS_FROM_API","method","then","data","catch","error","console","log","getters","PRODUCTS","CART"],"sources":["/home/denis/Desktop/catalog/catalog-vue-js/src/vuex/store.js"],"sourcesContent":["import Vuex from 'vuex'\nimport axios from 'axios'\nlet store= new Vuex.Store({ // объект Vuex.Store . store- хранилище \nstate: {\n     products:[],\n     cart:[] // корзина\n},// состояние в нем хранятся переменные массивы объекты\nmutations:{\n    DECRIMENT:()=>{\n\n    },\n    INCRIMENT:(state,index)=>{\n\n    },\n    REMOVE_FROM_CART:(state,index)=>{\n        // удаляю элемент из корзины\nstate.cart.splice(index,1)\n    },\n   SET_CART:(state,product)=>{// добавляю элемент в корзины \n   \n   if(state.cart.length){\n    let isProd=false;//меняем на тру если найдем элемент с таким же артиклем \n    state.cart.map((item)=>{\n    if(item.article === product.article){// елси нашел товар в корзине тогда к количеству прибовляем еще 1\n        isProd=true;\n        item.quantity++;\n    }\n})\n    if(!isProd){ // если не нашли товар в корзине тогда добавляю его туда \n    state.cart.push(product)\n}\n   }else{\n       state.cart.push(product)\n   }\n   },\n    SET_PRODUCTS_TO_STATE:(state,products)=>{\n        state.products=products;\n    }\n},// мутации- при помощи из мы меняем данные состояния state, они синхронны\n// т.е выполняются  по очереди  \nactions:{// для получения данных создаю действие\n    DELETE_FROM_CART:({commit},index)=>{//метод для удаления элемента из корзины \n        commit('REMOVE_FROM_CART',index) //  мутация\n    },\n    ADD_TO_CART:({commit},product)=>{\n        commit('SET_CART',product)\n\n    },\nDECRIMENTITEM_ITEM:({commit},index)=>{\n    commit('INCRIMENT',index)\n},\nIECRIMENTITEM_ITEM:({commit},index)=>{\n    commit('DECRIMENT',index)\n\n\n},\nGET_PRODUCTS_FROM_API({commit}){\nreturn axios('http://localhost:3000/products',{ // аксиос запрос с параметром get по урл, у аксиоса 2 аргумента один урл дальше настройки \nmethod:\"GET\" \n}).then((products)=>{// после того как запрос выполнился(тогда ) вызываем мутацию\n    commit('SET_PRODUCTS_TO_STATE',products.data);\n    return products.data;})// вызываю мутацию с названием SET_PRODUCTS_TO_STATE\n.catch(error=>{console.log(error)// если ошибка вывести ошибку в консоль\nreturn error})\n}\n},// чтобы не было очереди, они асинхронны можно вызвать 5 действий \ngetters:{\n    PRODUCTS(state){ //геттер(получатель) продуктс с аргументом state\n        return state.products; // возврат того что в стейте называется продуктс\n    },// данные обновляются реактивно при изменении state \nCART(state){\n    return state.cart\n}\n\n} // короткий путь до получения информации о данных в сейте \n});\nexport default store;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}