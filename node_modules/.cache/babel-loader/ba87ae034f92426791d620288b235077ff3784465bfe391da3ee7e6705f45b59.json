{"ast":null,"code":"import Vuex from 'vuex';\nimport axios from 'axios';\nlet store = new Vuex.Store({\n  // объект Vuex.Store . store- хранилище \n  state: {\n    products: [],\n    cart: [] // корзина\n  },\n\n  // состояние в нем хранятся переменные массивы объекты\n  mutations: {\n    ADD_TO_CART: ({\n      commit\n    }, product) => {\n      commit('SET_CART', product);\n    },\n    SET_PRODUCTS_TO_STATE: (state, products) => {\n      state.products = products;\n    }\n  },\n  // мутации- при помощи из мы меняем данные состояния state, они синхронны\n  // т.е выполняются  по очереди  \n  actions: {\n    // для получения данных создаю действие\n    ADD_TO_CART: ({\n      commit\n    }, product) => {\n      commit('SET_CART', product);\n    },\n    GET_PRODUCTS_FROM_API({\n      commit\n    }) {\n      return axios('http://localhost:3000/products', {\n        // аксиос запрос с параметром get по урл, у аксиоса 2 аргумента один урл дальше настройки \n        method: \"GET\"\n      }).then(products => {\n        // после того как запрос выполнился(тогда ) вызываем мутацию\n        commit('SET_PRODUCTS_TO_STATE', products.data);\n        return products.data;\n      }) // вызываю мутацию с названием SET_PRODUCTS_TO_STATE\n      .catch(error => {\n        console.log(error); // если ошибка вывести ошибку в консоль\n        return error;\n      });\n    }\n  },\n  // чтобы не было очереди, они асинхронны можно вызвать 5 действий \n  getters: {\n    PRODUCTS(state) {\n      //геттер(получатель) продуктс с аргументом state\n      return state.products; // возврат того что в стейте называется продуктс\n    },\n\n    // данные обновляются реактивно при изменении state \n    CART(state) {\n      return state.cart;\n    }\n  } // короткий путь до получения информации о данных в сейте \n});\n\nexport default store;","map":{"version":3,"names":["Vuex","axios","store","Store","state","products","cart","mutations","ADD_TO_CART","commit","product","SET_PRODUCTS_TO_STATE","actions","GET_PRODUCTS_FROM_API","method","then","data","catch","error","console","log","getters","PRODUCTS","CART"],"sources":["/home/denis/Desktop/catalog/catalog-vue-js/src/vuex/store.js"],"sourcesContent":["import Vuex from 'vuex'\nimport axios from 'axios'\nlet store= new Vuex.Store({ // объект Vuex.Store . store- хранилище \nstate: {\n     products:[],\n     cart:[] // корзина\n},// состояние в нем хранятся переменные массивы объекты\nmutations:{\n    ADD_TO_CART:({commit},product)=>{\n        commit('SET_CART',product)\n\n    },\n    SET_PRODUCTS_TO_STATE:(state,products)=>{\n        state.products=products;\n    }\n},// мутации- при помощи из мы меняем данные состояния state, они синхронны\n// т.е выполняются  по очереди  \nactions:{// для получения данных создаю действие\n    ADD_TO_CART:({commit},product)=>{\n        commit('SET_CART',product)\n\n    },\nGET_PRODUCTS_FROM_API({commit}){\nreturn axios('http://localhost:3000/products',{ // аксиос запрос с параметром get по урл, у аксиоса 2 аргумента один урл дальше настройки \nmethod:\"GET\" \n}).then((products)=>{// после того как запрос выполнился(тогда ) вызываем мутацию\n    commit('SET_PRODUCTS_TO_STATE',products.data);\n    return products.data;})// вызываю мутацию с названием SET_PRODUCTS_TO_STATE\n.catch(error=>{console.log(error)// если ошибка вывести ошибку в консоль\nreturn error})\n}\n},// чтобы не было очереди, они асинхронны можно вызвать 5 действий \ngetters:{\n    PRODUCTS(state){ //геттер(получатель) продуктс с аргументом state\n        return state.products; // возврат того что в стейте называется продуктс\n    },// данные обновляются реактивно при изменении state \nCART(state){\n    return state.cart\n}\n\n} // короткий путь до получения информации о данных в сейте \n});\nexport default store;"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,KAAK,MAAM,OAAO;AACzB,IAAIC,KAAK,GAAE,IAAIF,IAAI,CAACG,KAAK,CAAC;EAAE;EAC5BC,KAAK,EAAE;IACFC,QAAQ,EAAC,EAAE;IACXC,IAAI,EAAC,EAAE,CAAC;EACb,CAAC;;EAAC;EACFC,SAAS,EAAC;IACNC,WAAW,EAACA,CAAC;MAACC;IAAM,CAAC,EAACC,OAAO,KAAG;MAC5BD,MAAM,CAAC,UAAU,EAACC,OAAO,CAAC;IAE9B,CAAC;IACDC,qBAAqB,EAACA,CAACP,KAAK,EAACC,QAAQ,KAAG;MACpCD,KAAK,CAACC,QAAQ,GAACA,QAAQ;IAC3B;EACJ,CAAC;EAAC;EACF;EACAO,OAAO,EAAC;IAAC;IACLJ,WAAW,EAACA,CAAC;MAACC;IAAM,CAAC,EAACC,OAAO,KAAG;MAC5BD,MAAM,CAAC,UAAU,EAACC,OAAO,CAAC;IAE9B,CAAC;IACLG,qBAAqBA,CAAC;MAACJ;IAAM,CAAC,EAAC;MAC/B,OAAOR,KAAK,CAAC,gCAAgC,EAAC;QAAE;QAChDa,MAAM,EAAC;MACP,CAAC,CAAC,CAACC,IAAI,CAAEV,QAAQ,IAAG;QAAC;QACjBI,MAAM,CAAC,uBAAuB,EAACJ,QAAQ,CAACW,IAAI,CAAC;QAC7C,OAAOX,QAAQ,CAACW,IAAI;MAAC,CAAC,CAAC;MAAA,CAC1BC,KAAK,CAACC,KAAK,IAAE;QAACC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QACjC,OAAOA,KAAK;MAAA,CAAC,CAAC;IACd;EACA,CAAC;EAAC;EACFG,OAAO,EAAC;IACJC,QAAQA,CAAClB,KAAK,EAAC;MAAE;MACb,OAAOA,KAAK,CAACC,QAAQ,CAAC,CAAC;IAC3B,CAAC;;IAAC;IACNkB,IAAIA,CAACnB,KAAK,EAAC;MACP,OAAOA,KAAK,CAACE,IAAI;IACrB;EAEA,CAAC,CAAC;AACF,CAAC,CAAC;;AACF,eAAeJ,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}