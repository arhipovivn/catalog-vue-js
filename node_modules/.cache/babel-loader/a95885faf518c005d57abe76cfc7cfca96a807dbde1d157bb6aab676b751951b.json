{"ast":null,"code":"import Vuex from 'vuex';\nimport axios from 'axios';\nlet store = new Vuex.Store({\n  // объект Vuex.Store . store- хранилище \n  state: {\n    products: []\n  },\n  // состояние в нем хранятся переменные массивы объекты\n  mutations: {\n    SET_PRODUCTS_TO_STATE: (state, products) => {\n      state.products = products;\n    }\n  },\n  // мутации- при помощи из мы меняем данные состояния state, они синхронны\n  // т.е выполняются  по очереди  \n  actions: {\n    // для получения данных создаю действие \n    GET_PRODUCTS_FROM_API({\n      commit\n    }) {\n      return axios('http://localhost:3000/products', {\n        // аксиос запрос с параметром get по урл, у аксиоса 2 аргумента один урл дальше настройки \n        method: \"GET\"\n      }).then(response => {\n        // т к это промис \n        commit('SET_PRODUCTS_TO_STATE', response);\n      }); // вызываю мутацию с названием SET_PRODUCTS_TO_STATE\n    }\n  },\n\n  // чтобы не было очереди, они асинхронны можно вызвать 5 действий \n  getters: {\n    PRODUCTS(state) {\n      //геттер(получатель) продуктс с аргументом state\n      return state.products; // возврат того что в стейте называется продуктс\n    } // данные обновляются реактивно при изменении state \n  } // короткий путь до получения информации о данных в сейте \n});\n\nexport default store;","map":{"version":3,"names":["Vuex","axios","store","Store","state","products","mutations","SET_PRODUCTS_TO_STATE","actions","GET_PRODUCTS_FROM_API","commit","method","then","response","getters","PRODUCTS"],"sources":["/home/denis/Desktop/catalog/catalog-vue-js/src/vuex/store.js"],"sourcesContent":["import Vuex from 'vuex'\nimport axios from 'axios'\nlet store= new Vuex.Store({ // объект Vuex.Store . store- хранилище \nstate: {\n     products:[]\n},// состояние в нем хранятся переменные массивы объекты\nmutations:{\n    SET_PRODUCTS_TO_STATE:(state,products)=>{\n        state.products=products;\n    }\n},// мутации- при помощи из мы меняем данные состояния state, они синхронны\n// т.е выполняются  по очереди  \nactions:{// для получения данных создаю действие \nGET_PRODUCTS_FROM_API({commit}){\nreturn axios('http://localhost:3000/products',{ // аксиос запрос с параметром get по урл, у аксиоса 2 аргумента один урл дальше настройки \nmethod:\"GET\"\n}).then((response)=>{// т к это промис \n    commit('SET_PRODUCTS_TO_STATE',response)})// вызываю мутацию с названием SET_PRODUCTS_TO_STATE\n}\n},// чтобы не было очереди, они асинхронны можно вызвать 5 действий \ngetters:{\n    PRODUCTS(state){ //геттер(получатель) продуктс с аргументом state\n        return state.products; // возврат того что в стейте называется продуктс\n    }// данные обновляются реактивно при изменении state \n} // короткий путь до получения информации о данных в сейте \n});\nexport default store;"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,KAAK,MAAM,OAAO;AACzB,IAAIC,KAAK,GAAE,IAAIF,IAAI,CAACG,KAAK,CAAC;EAAE;EAC5BC,KAAK,EAAE;IACFC,QAAQ,EAAC;EACd,CAAC;EAAC;EACFC,SAAS,EAAC;IACNC,qBAAqB,EAACA,CAACH,KAAK,EAACC,QAAQ,KAAG;MACpCD,KAAK,CAACC,QAAQ,GAACA,QAAQ;IAC3B;EACJ,CAAC;EAAC;EACF;EACAG,OAAO,EAAC;IAAC;IACTC,qBAAqBA,CAAC;MAACC;IAAM,CAAC,EAAC;MAC/B,OAAOT,KAAK,CAAC,gCAAgC,EAAC;QAAE;QAChDU,MAAM,EAAC;MACP,CAAC,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAG;QAAC;QACjBH,MAAM,CAAC,uBAAuB,EAACG,QAAQ,CAAC;MAAA,CAAC,CAAC;IAC9C;EACA,CAAC;;EAAC;EACFC,OAAO,EAAC;IACJC,QAAQA,CAACX,KAAK,EAAC;MAAE;MACb,OAAOA,KAAK,CAACC,QAAQ,CAAC,CAAC;IAC3B,CAAC;EACL,CAAC,CAAC;AACF,CAAC,CAAC;;AACF,eAAeH,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}